#include "f_mods.h"
#include <QtCore>
#include <QtXml>

QStringList listDefaultModFolders(){
    QStringList list;
    // Read xml information
    QFile file("Assets/Modules/defaultModules.xml");
    if(file.open(QIODevice::ReadOnly)){
        QDomDocument xml;
        xml.setContent(&file);
        QDomElement module = xml.firstChildElement("root").firstChildElement("module");
        for(;!module.isNull(); module = module.nextSiblingElement()){
            list << module.firstChild().nodeValue();
        }
    }
    qDebug() << list;
    return list;
}

QStringList listModFolders(){
    QStringList mod_list;
    QDir root("Assets/Modules/");
    foreach(QFileInfo entry, root.entryInfoList(QDir::Dirs | QDir::NoDotAndDotDot)){
        mod_list << entry.fileName();
    }

    // Removing default mods from list
    foreach(QString entry, listDefaultModFolders()){
        mod_list.removeAll(entry);
    }

    return mod_list;
}

QStringList getModExtraFiles(QString modName){
    QString mod = "Assets/Modules/" + modName + "/";
    QStringList list;

    // If modInfo.xml present, get file list
    QFile file(mod + "modInfo.xml");
    if(file.open(QIODevice::ReadOnly)){
        QDomDocument modxml;
        modxml.setContent(&file);
        file.close();
        QDomElement filexml = modxml.firstChildElement("root").firstChildElement("extrafiles").firstChildElement("file");
        if(!filexml.isNull()){
            for(;!filexml.isNull(); filexml = filexml.nextSiblingElement()){
                list << filexml.firstChild().nodeValue();
            }
        }
        //qDebug() << list;
        return list;
    }
    QStringList empty;
    empty << "";
    return empty;
}

void generateModsExclusion(){
    // Regenerate exclusion file
    QFile exclusion("checker/exclusions.mods.xml");
    exclusion.remove();
    QDomDocument xml;
    QDomNode declaration = xml.createProcessingInstruction("xml",QString("version=\"1.0\" encoding=\"UTF-8\""));
    xml.insertBefore(declaration,xml.firstChild());
    QDomComment comment = xml.createComment("Do not edit this file, it is regenerated automatically!");
    xml.appendChild(comment);

    QDomNode root = xml.createElement("exclusions");
    xml.appendChild(root);

    // Get mod list
    QStringList mod_list = listModFolders();

    // Add these to exclusion
    foreach(QString entry, mod_list){
        QStringList file_list = getModExtraFiles(entry);
        // Create entity
        QDomElement entity = xml.createElement("entity");
        entity.appendChild(xml.createTextNode("Assets/Modules/" + entry + "/*"));
        root.appendChild(entity);

        foreach(QString file, file_list){
            if(file != ""){
                QDomElement temp = xml.createElement("entity");
                temp.appendChild(xml.createTextNode(file));
                root.appendChild(temp);
            }
        }
    }

    // Save exclusion file
    exclusion.open(QIODevice::Truncate | QIODevice::WriteOnly);
    QTextStream ts(&exclusion);
    xml.save(ts, 4);
    exclusion.close();
}

void generateModsMLFFile(){
    // Open original file
    QFile file_orig("Assets/Modules/MLF_CIV4ModularLoadingControls.xml");
    QStringList enabled_mods;
    if(file_orig.open(QIODevice::ReadOnly)){
        QDomDocument xml_orig;
        xml_orig.setContent(&file_orig);
        file_orig.close();

        // List enabled modules
        QDomElement module_orig = xml_orig.firstChildElement("Civ4ModularLoadControls").firstChildElement("ConfigurationInfos").firstChildElement("ConfigurationInfo").firstChildElement("Modules").firstChildElement("Module").toElement();
        for(;!module_orig.isNull();module_orig = module_orig.nextSiblingElement()){
            if(module_orig.firstChildElement("bLoad").firstChild().nodeValue() == "1"){
                enabled_mods << module_orig.firstChildElement("Directory").firstChild().nodeValue();
            }
        }

        //qDebug() << enabled_mods;
    }

    // If there are enabled mods that are not default, inject audio xml


    // Generate new file
    QDomDocument xml;

    // Generate header
    QDomNode declaration = xml.createProcessingInstruction("xml",QString("version=\"1.0\""));
    xml.insertBefore(declaration,xml.firstChild());
    QDomComment comment = xml.createComment("Civilization 4 - Rise of Mankind: A New Dawn, module control loading file");
    QDomComment comment1 = xml.createComment("Originally created by World of Civilization Team");
    xml.appendChild(comment);
    xml.appendChild(comment1);

    // Generate structure
    QDomElement Civ4ModularLoadControls = xml.createElement("Civ4ModularLoadControls");
    xml.appendChild(Civ4ModularLoadControls);
    Civ4ModularLoadControls.setAttribute("xmlns","x-schema:CIV4ModularLoadingControlsSchema.xml");
    QDomElement DefaultConfiguration = xml.createElement("DefaultConfiguration");
    Civ4ModularLoadControls.appendChild(DefaultConfiguration);
    DefaultConfiguration.appendChild(xml.createTextNode("Modules"));
    QDomElement ConfigurationInfos = xml.createElement("ConfigurationInfos");
    Civ4ModularLoadControls.appendChild(ConfigurationInfos);
    QDomElement ConfigurationInfo = xml.createElement("ConfigurationInfo");
    ConfigurationInfos.appendChild(ConfigurationInfo);
    QDomElement Type = xml.createElement("Type");
    ConfigurationInfo.appendChild(Type);
    Type.appendChild(xml.createTextNode("Modules"));
    QDomElement Description = xml.createElement("Description");
    ConfigurationInfo.appendChild(Description);
    Description.appendChild(xml.createTextNode("Initialize ALL Modules by using the MLF file structure"));
    QDomElement Modules = xml.createElement("Modules");
    ConfigurationInfo.appendChild(Modules);

    // Generate an entry for each mod detected
    QStringList full_list = listDefaultModFolders() + listModFolders();
    foreach(QString entry, full_list){
        if(!entry.isEmpty()){
            QDomElement Module = xml.createElement("Module");
            Modules.appendChild(Module);
            QDomElement Directory = xml.createElement("Directory");
            Module.appendChild(Directory);
            Directory.appendChild(xml.createTextNode(entry));
            QDomElement bLoad = xml.createElement("bLoad");
            Module.appendChild(bLoad);
            if(enabled_mods.contains(entry)){
                bLoad.appendChild(xml.createTextNode("1"));
            }
            else{
                bLoad.appendChild(xml.createTextNode("0"));
            }
        }
    }

    // Save file
    QFile save("Assets/Modules/MLF_CIV4ModularLoadingControls.xml");
    save.remove();
    save.open(QIODevice::Truncate | QIODevice::WriteOnly);
    QTextStream ts(&save);
    xml.save(ts, 4);
    save.close();
}
