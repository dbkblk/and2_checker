#include "f_mods.h"
#include <QtCore>
#include <QtXml>

QStringList listDefaultModFolders(){
    QStringList list;
    // Read xml information
    QFile file("Assets/Modules/defaultModules.xml");
    if(file.open(QIODevice::ReadOnly)){
        QDomDocument xml;
        xml.setContent(&file);
        QDomElement module = xml.firstChildElement("root").firstChildElement("module");
        for(;!module.isNull(); module = module.nextSiblingElement()){
            list << module.firstChild().nodeValue();
        }
    }
    //qDebug() << list;
    return list;
}

QStringList listModFolders(){
    QStringList mod_list;
    QDir root("Assets/Modules/");
    foreach(QFileInfo entry, root.entryInfoList(QDir::Dirs | QDir::NoDotAndDotDot)){
        mod_list << entry.fileName();
    }

    // Removing default mods from list
    foreach(QString entry, listDefaultModFolders()){
        mod_list.removeAll(entry);
    }

    return mod_list;
}

QStringList getModExtraFiles(QString modName){
    QString mod = "Assets/Modules/" + modName + "/";
    QStringList list;

    // If modInfo.xml present, get file list
    QFile file(mod + "modInfo.xml");
    if(file.open(QIODevice::ReadOnly)){
        QDomDocument modxml;
        modxml.setContent(&file);
        file.close();
        QDomElement filexml = modxml.firstChildElement("root").firstChildElement("extrafiles").firstChildElement("file");
        if(!filexml.isNull()){
            for(;!filexml.isNull(); filexml = filexml.nextSiblingElement()){
                list << filexml.firstChild().nodeValue();
            }
        }
        //qDebug() << list;
        return list;
    }
    QStringList empty;
    return empty;
}

void generateModsExclusion(){
    // Regenerate exclusion file
    QFile exclusion("checker/exclusions.mods.xml");
    exclusion.remove();
    QDomDocument xml;
    QDomNode declaration = xml.createProcessingInstruction("xml",QString("version=\"1.0\" encoding=\"UTF-8\""));
    xml.insertBefore(declaration,xml.firstChild());
    QDomComment comment = xml.createComment("Do not edit this file, it is regenerated automatically!");
    xml.appendChild(comment);

    QDomNode root = xml.createElement("exclusions");
    xml.appendChild(root);

    // Get mod list
    QStringList mod_list = listModFolders();

    // Add these to exclusion
    foreach(QString entry, mod_list){
        QStringList file_list = getModExtraFiles(entry);
        // Create entity
        QDomElement entity = xml.createElement("entity");
        entity.appendChild(xml.createTextNode("Assets/Modules/" + entry + "/*"));
        root.appendChild(entity);

        foreach(QString file, file_list){
            if(file != ""){
                QDomElement temp = xml.createElement("entity");
                temp.appendChild(xml.createTextNode(file));
                root.appendChild(temp);
            }
        }
    }

    // Save exclusion file
    exclusion.open(QIODevice::Truncate | QIODevice::WriteOnly);
    QTextStream ts(&exclusion);
    xml.save(ts, 4);
    exclusion.close();
}

void generateModsMLFFile(){
    // Open original file
    QFile file_orig("Assets/Modules/MLF_CIV4ModularLoadingControls.xml");
    QStringList enabled_mods;
    if(file_orig.open(QIODevice::ReadOnly)){
        QDomDocument xml_orig;
        xml_orig.setContent(&file_orig);
        file_orig.close();

        // List enabled modules
        QDomElement module_orig = xml_orig.firstChildElement("Civ4ModularLoadControls").firstChildElement("ConfigurationInfos").firstChildElement("ConfigurationInfo").firstChildElement("Modules").firstChildElement("Module").toElement();
        for(;!module_orig.isNull();module_orig = module_orig.nextSiblingElement()){
            if(module_orig.firstChildElement("bLoad").firstChild().nodeValue() == "1"){
                enabled_mods << module_orig.firstChildElement("Directory").firstChild().nodeValue();
            }
        }

        //qDebug() << enabled_mods;
    }

    // Generate new file
    QDomDocument xml;

    // Generate header
    QDomNode declaration = xml.createProcessingInstruction("xml",QString("version=\"1.0\""));
    xml.insertBefore(declaration,xml.firstChild());
    QDomComment comment = xml.createComment("Civilization 4 - Rise of Mankind: A New Dawn, module control loading file");
    QDomComment comment1 = xml.createComment("Originally created by World of Civilization Team");
    xml.appendChild(comment);
    xml.appendChild(comment1);

    // Generate structure
    QDomElement Civ4ModularLoadControls = xml.createElement("Civ4ModularLoadControls");
    xml.appendChild(Civ4ModularLoadControls);
    Civ4ModularLoadControls.setAttribute("xmlns","x-schema:CIV4ModularLoadingControlsSchema.xml");
    QDomElement DefaultConfiguration = xml.createElement("DefaultConfiguration");
    Civ4ModularLoadControls.appendChild(DefaultConfiguration);
    DefaultConfiguration.appendChild(xml.createTextNode("Modules"));
    QDomElement ConfigurationInfos = xml.createElement("ConfigurationInfos");
    Civ4ModularLoadControls.appendChild(ConfigurationInfos);
    QDomElement ConfigurationInfo = xml.createElement("ConfigurationInfo");
    ConfigurationInfos.appendChild(ConfigurationInfo);
    QDomElement Type = xml.createElement("Type");
    ConfigurationInfo.appendChild(Type);
    Type.appendChild(xml.createTextNode("Modules"));
    QDomElement Description = xml.createElement("Description");
    ConfigurationInfo.appendChild(Description);
    Description.appendChild(xml.createTextNode("Initialize ALL Modules by using the MLF file structure"));
    QDomElement Modules = xml.createElement("Modules");
    ConfigurationInfo.appendChild(Modules);

    // Generate an entry for each mod detected
    QStringList full_list = listDefaultModFolders() + listModFolders();
    foreach(QString entry, full_list){
        if(!entry.isEmpty()){
            QDomElement Module = xml.createElement("Module");
            Modules.appendChild(Module);
            QDomElement Directory = xml.createElement("Directory");
            Module.appendChild(Directory);
            Directory.appendChild(xml.createTextNode(entry));
            QDomElement bLoad = xml.createElement("bLoad");
            Module.appendChild(bLoad);
            if(enabled_mods.contains(entry)){
                bLoad.appendChild(xml.createTextNode("1"));
            }
            else{
                bLoad.appendChild(xml.createTextNode("0"));
            }
        }
    }

    // Save file
    QFile save("Assets/Modules/MLF_CIV4ModularLoadingControls.xml");
    save.remove();
    save.open(QIODevice::Truncate | QIODevice::WriteOnly);
    QTextStream ts(&save);
    xml.save(ts, 4);
    save.close();
}

f_injection::f_injection(QObject *parent) :
    QObject(parent)
{
    _working =false;
    _abort = false;
}

void f_injection::requestWork()
{
    mutex.lock();
    _working = true;
    _abort = false;
    mutex.unlock();

    emit workRequested();
}

void f_injection::abort()
{
    mutex.lock();
    if (_working) {
        _abort = true;
    }
    mutex.unlock();
}

void f_injection::start()
{
    // Wait 5s before to inject audio files
    QEventLoop loop;
    QTimer::singleShot(5000, &loop, SLOT(quit()));
    loop.exec();

    qDebug("Starting Audio XML mod injection.");
    preInjectXML();

    // Set _working to false, meaning the process can't be aborted anymore.
    mutex.lock();
    _working = false;
    mutex.unlock();

    qDebug("Audio XML mod injection done.");
}

// Civ4_audio_xml_injector code v1.0
QString getRootTag(QString fileSuffix)
{
    if(fileSuffix == "Audio2DScripts.xml"){
        return "Script2DSounds";
    }
    else if(fileSuffix == "Audio3DScripts.xml"){
        return "Script3DSounds";
    }
    else if(fileSuffix == "AudioDefines.xml"){
        return "AudioDefines";
    }
    else if(fileSuffix == "AudioSoundscapeScripts.xml"){
        return "ScriptSoundscapes";
    }
    else{
        return "error";
    }
}

QString getStartTag(QString fileSuffix)
{
    if(fileSuffix == "Audio2DScripts.xml"){
        return "Script2DSound";
    }
    else if(fileSuffix == "Audio3DScripts.xml"){
        return "Script3DSound";
    }
    else if(fileSuffix == "AudioDefines.xml"){
        return "SoundData";
    }
    else if(fileSuffix == "AudioSoundscapeScripts.xml"){
        return "ScriptSoundscape";
    }
    else{
        return "error";
    }
}

QString getIDTag(QString fileSuffix)
{
    if(fileSuffix == "Audio2DScripts.xml"){
        return "ScriptID";
    }
    else if(fileSuffix == "Audio3DScripts.xml"){
        return "ScriptID";
    }
    else if(fileSuffix == "AudioDefines.xml"){
        return "SoundID";
    }
    else if(fileSuffix == "AudioSoundscapeScripts.xml"){
        return "ScriptID";
    }
    else{
        return "error";
    }
}

bool injectXml(QString defaultFile, QStringList fileList, QString fileSuffix){
    qDebug() << "Injecting" << fileList.count() << "audio files into" << fileSuffix;
    // Open default xml file and make a list of all tags
    QFile audio_file(defaultFile);
    if(!audio_file.open(QIODevice::ReadOnly)){
        return false;
    }
    QDomDocument audio;
    audio.setContent(&audio_file);
    audio_file.close();

    QString root_tag = getRootTag(fileSuffix);
    QString start_tag = getStartTag(fileSuffix);
    QString id_tag = getIDTag(fileSuffix);

    QStringList audio_tag_list;
    QDomElement audio_tag;
    if(fileSuffix == "AudioDefines.xml"){
        audio_tag = audio.firstChildElement(root_tag).firstChildElement("SoundDatas").firstChildElement(start_tag).toElement();
    }
    else{
        audio_tag = audio.firstChildElement(root_tag).firstChildElement(start_tag).toElement();
    }
    for(;!audio_tag.isNull();audio_tag = audio_tag.nextSiblingElement()){
        // Check if tag exists in the base file
        audio_tag_list << audio_tag.firstChildElement(id_tag).firstChild().nodeValue();
    }

    // List all files with the right suffix
    int total_new = 0;
    foreach(QString fileName, fileList){
        // For each file, for each tag ID, check if exists and inject all dependencies if not.
        if(fileName.endsWith(fileSuffix)){
            QFile file(fileName);
            file.open(QIODevice::ReadOnly);
            QDomDocument xml;
            xml.setContent(&file);
            file.close();
            QDomElement entity;
            if(fileSuffix == "AudioDefines.xml"){
                entity = xml.firstChildElement(root_tag).firstChildElement("SoundDatas").firstChildElement(start_tag).toElement();
            }
            else{
                entity = xml.firstChildElement(root_tag).firstChildElement(start_tag).toElement();
            }
            QList<QDomElement> node_list;
            for(entity;!entity.isNull();entity = entity.nextSiblingElement()){
                // Check if tag exists in the base file
                QString tag = entity.firstChildElement(id_tag).firstChild().nodeValue();
                int j = 0;
                foreach(QString entry, audio_tag_list){
                    if(entry == tag){
                        j++;
                    }
                }
                if(j == 0){
                    total_new++;
                    // Inject all dependencies to the xml file
                    audio_tag_list << tag;
                    node_list << entity;
                }
            }
            foreach(QDomElement element, node_list){
            if(fileSuffix == "AudioDefines.xml"){
                audio.firstChildElement(root_tag).firstChildElement("SoundDatas").appendChild(element);
            }
            else{
                audio.firstChildElement(root_tag).appendChild(element);
            }
            }
        }
    }

    // Save the file
    if(total_new > 0){
        audio_file.remove();
        audio_file.open(QIODevice::Truncate | QIODevice::WriteOnly);
        QTextStream ts(&audio_file);
        audio.save(ts, 4);
        audio_file.close();
        return true;
    }
    return false;
}

QString getOfficialFile(QString fileSuffix){
    return fileSuffix.prepend("Assets/XML/Audio/");
}

void preInjectXML()
{
    // List all audio files
    QStringList filter;
    filter << "*AudioSoundscapeScripts.xml" << "*AudioDefines.xml" << "*Audio3DScripts.xml" << "*Audio2DScripts.xml";
    QStringList file_list;
    qDebug() << "Listing file";
    QDirIterator it("Assets/Modules/", filter, QDir::Files, QDirIterator::Subdirectories);
    while (it.hasNext()) {
        file_list << it.next();
    }

    // Inject values
    injectXml("Assets/XML/Audio/Audio2DScripts.xml",file_list,"Audio2DScripts.xml");
    injectXml("Assets/XML/Audio/Audio3DScripts.xml",file_list,"Audio3DScripts.xml");
    injectXml("Assets/XML/Audio/AudioDefines.xml",file_list,"AudioDefines.xml");
    injectXml("Assets/XML/Audio/AudioSoundscapeScripts.xml",file_list,"AudioSoundscapeScripts.xml");
}
